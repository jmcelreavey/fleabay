generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id     String @id @default(cuid())
  userId String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([type, provider])
  @@index([userId])
}

model Session {
  id     String @id @default(cuid())
  userId String

  expires      DateTime
  sessionToken String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([userId])
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  buyer     Buyer?
  seller    Seller?

  @@index([name, emailVerified])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model Auction {
  id            Int     @id @default(autoincrement())
  startingPrice Decimal @db.Decimal(7, 2)
  sellerId      String
  highestBidId  Int?    @unique

  name         String
  description  String?  @db.Text
  startDate    DateTime
  endDate      DateTime
  bidIncrement Decimal  @default(1) @db.Decimal(7, 2)

  deletedAt  DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  images     AuctionImage[]
  bids       Bid[]          @relation("AuctionToBids")
  highestBid Bid?           @relation("AuctionToHighestBid", fields: [highestBidId], references: [id])
  seller     Seller         @relation(fields: [sellerId], references: [id])

  @@index([startDate, endDate])
  @@index([sellerId])
}

model AuctionImage {
  id        Int @id @default(autoincrement())
  auctionId Int

  imageKey String
  imageUrl String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auction   Auction   @relation(fields: [auctionId], references: [id])

  @@index([auctionId])
}

model Bid {
  id        Int    @id @default(autoincrement())
  auctionId Int
  buyerId   String

  amount Decimal @db.Decimal(7, 2)

  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  auction           Auction   @relation("AuctionToBids", fields: [auctionId], references: [id], map: "AuctionToBidsKey")
  highestBidAuction Auction?  @relation("AuctionToHighestBid")
  buyer             Buyer     @relation(fields: [buyerId], references: [id])

  @@index([amount])
  @@index([buyerId])
  @@index([auctionId])
}

model Buyer {
  id     String @id @default(cuid())
  userId String @unique

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  bids      Bid[]

  @@index([userId])
}

model Seller {
  id     String @id @default(cuid())
  userId String @unique

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}
